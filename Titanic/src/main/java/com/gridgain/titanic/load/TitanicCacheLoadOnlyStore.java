package com.gridgain.titanic.load;

import java.io.IOException;
import java.io.Serializable;
import java.util.Iterator;
import java.util.NoSuchElementException;

import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;

import javax.cache.integration.CacheLoaderException;

import org.apache.ignite.cache.store.CacheLoadOnlyStoreAdapter;
import org.apache.ignite.lang.IgniteBiTuple;
import org.jetbrains.annotations.Nullable;

import com.gridgain.titanic.model.Titanic;
import com.gridgain.titanic.model.TitanicKey;
import com.gridgain.titanic.util.ParseTypes;

/**
 * Csv data loader for product data.
 * 
 * @param <K>
 * @param <V>
 */
public class TitanicCacheLoadOnlyStore<K, V> extends CacheLoadOnlyStoreAdapter<TitanicKey, Titanic, CSVRecord>
        implements Serializable {

    /**
     * Peek autogenerated
     */
    private static final long serialVersionUID = -460292327251956702L;

    // /** Csv file name. */
    // private String csvFileName;

    private static Reader reader; // = Files.newBufferedReader(Paths.get("Data/Offices.csv"),
                                  // StandardCharsets.UTF_8);

    /* private static function to set reader etc. */
    private static void setReader(String fn) throws IOException {
        reader = Files.newBufferedReader(Paths.get(fn), StandardCharsets.UTF_8);
    }


    /** Empty Constructor. */
    public TitanicCacheLoadOnlyStore() {
        System.out.println(">>> TitanicCacheLoadOnlyStore (LoadOnly type) constructed");
    }

    // /** Constructor with csv file parm. */
    // public TitanicCacheLoadOnlyStore(String fn) {
    //     System.out.println(">>> TitanicCacheLoadOnlyStore (LoadOnly type) constructed with file to be loaded: " + fn);
    //     csvFileName = fn;
    // }

    /** {@inheritDoc} */
    @Override 
    protected Iterator<CSVRecord> inputIterator(@Nullable Object... args)
            throws CacheLoaderException {
        System.out.println(">>> TitanicCacheLoadOnlyStore: inputIterator(" + args + ") called...");
        String csvFileName = (String)args[0];
        
        try {
            System.out.println(">>> TitanicCacheLoadOnlyStore.inputIterator() set File Reader for: " + csvFileName + " ...");
            setReader(csvFileName);
            CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withEscape('\\').withQuoteMode(QuoteMode.NONE).withFirstRecordAsHeader().withTrim());
            Iterator csvIterator = csvParser.iterator();

            /**
             * Iterator for text input. The scanner is implicitly closed when there's nothing to scan.
             * IgniteBiTuple<TitanicKey, Titanic>
             */
            return new Iterator<CSVRecord>() {

                /** {@inheritDoc} */
                @Override public boolean hasNext() {
                    if (!csvIterator.hasNext()) {
                        try {
                            reader.close();
                        } catch (IOException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        return false;
                    }
                    return true;
                }

                /** {@inheritDoc} */
                @Override public CSVRecord next() {
                    if (!hasNext()) {
                        throw new NoSuchElementException();
                    }
                    return (CSVRecord)csvIterator.next();
                }

                /** {@inheritDoc} */
                @Override public void remove() {
                    throw new UnsupportedOperationException();
                }
            };
            
        } catch (IOException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        return null;
    }

    @Override @Nullable
    protected IgniteBiTuple<TitanicKey, Titanic> parse(CSVRecord rec, @Nullable Object... args) {

        TitanicKey k = new TitanicKey(ParseTypes.parseInteger(rec.get(0)));
        Titanic    v = new Titanic(
            ParseTypes.parseInteger(rec.get(1)),
            ParseTypes.parseInteger(rec.get(2)),
            rec.get(3),
            rec.get(4),
            ParseTypes.parseDouble(rec.get(5)),
            ParseTypes.parseInteger(rec.get(6)),
            ParseTypes.parseInteger(rec.get(7)),
            rec.get(8),
            ParseTypes.parseDouble(rec.get(9)),
            rec.get(10),
            rec.get(11)
        );

        return new IgniteBiTuple<TitanicKey, Titanic>(k,v);
    }


}
